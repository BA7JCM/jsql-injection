/*******************************************************************************
 * Copyhacked (H) 2012-2025.
 * This program and the accompanying materials
 * are made available under no term at all, use it like
 * you want, but share and discuss it
 * every time possible with every body.
 * 
 * Contributors:
 *      ron190 at ymail dot com - initial implementation
 ******************************************************************************/
package com.jsql.view.swing.manager;

import com.jsql.model.accessible.ExploitMethod;
import com.jsql.model.exception.JSqlException;
import com.jsql.util.I18nUtil;
import com.jsql.view.swing.manager.util.*;
import com.jsql.view.swing.text.JPopupTextField;
import com.jsql.view.swing.text.JTextFieldPlaceholder;
import com.jsql.view.swing.text.JToolTipI18n;
import com.jsql.view.swing.util.I18nViewUtil;
import com.jsql.view.swing.util.MediatorHelper;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.Arrays;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;

/**
 * Manager for uploading PHP SQL shell to the host and send queries.
 */
public class ManagerExploit extends AbstractManagerShell {

    private final AtomicReference<JTextField> username = new AtomicReference<>();
    private final AtomicReference<JTextField> password = new AtomicReference<>();
    private final AtomicReference<JTextField> netshare = new AtomicReference<>();

    public final static String KEY_UDF_TAB = "UDF_TAB";
    public final static String KEY_WEBSHELL_TAB = "WEBSHELL_TAB";
    public final static String KEY_SQLSHELL_TAB = "SQLSHELL_TAB";
    public final static String KEY_UPLOAD_TAB = "UPLOAD_TAB";

    private final JComboBox<ModelItemType> comboBoxExploitTypes = new JComboBox<>(new ModelItemType[]{
        new ModelItemType(ManagerExploit.KEY_UDF_TAB, "UDF_TOOLTIP"),
        new ModelItemType(ManagerExploit.KEY_WEBSHELL_TAB, "WEBSHELL_TOOLTIP"),
        new ModelItemType(ManagerExploit.KEY_SQLSHELL_TAB, "SQLSHELL_TOOLTIP"),
        new ModelItemType(ManagerExploit.KEY_UPLOAD_TAB, "UPLOAD_TOOLTIP"),
    });

    private final JComboBox<Object> comboBoxExploitMethods = new JComboBox<>(new Object[]{
        ExploitMethod.AUTO,
        ComboBoxMethodRenderer.SEPARATOR,
        ExploitMethod.QUERY_BODY,
        ExploitMethod.TEMP_TABLE,
        ComboBoxMethodRenderer.SEPARATOR,
        ExploitMethod.NETSHARE
    });

    public ManagerExploit() {
        var userPassPanel = new JPanel();
        var groupLayout = new GroupLayout(userPassPanel);
        userPassPanel.setLayout(groupLayout);

        this.run.addActionListener(new ActionExploit(this.comboBoxExploitTypes));

        Arrays.asList(
            new ModelExploit(this.netshare, "EXPLOIT_NETSHARE_LABEL", "EXPLOIT_NETSHARE_TOOLTIP"),
            new ModelExploit(this.username, "SQL_SHELL_USERNAME_LABEL", "SQL_SHELL_USERNAME_TOOLTIP"),
            new ModelExploit(this.password, "SQL_SHELL_PASSWORD_LABEL", "SQL_SHELL_PASSWORD_TOOLTIP")
        ).forEach(model -> {
            var tooltip = new AtomicReference<>(new JToolTipI18n(I18nUtil.valueByKey(model.tooltipI18n)));
            model.textfield.set(new JPopupTextField(new JTextFieldPlaceholder(I18nUtil.valueByKey(model.labelI18n)) {
                @Override
                public JToolTip createToolTip() {
                    return tooltip.get();
                }
            }).getProxy());
            I18nViewUtil.addComponentForKey(model.labelI18n, model.textfield.get());
            I18nViewUtil.addComponentForKey(model.tooltipI18n, tooltip.get());
            model.textfield.get().setToolTipText(I18nUtil.valueByKey(model.tooltipI18n));
        });

        Arrays.asList(this.username.get(), this.password.get(), this.scrollListPaths, this.textfieldUrlShell, this.netshare.get())
        .forEach(component -> component.setVisible(false));

        this.comboBoxExploitTypes.setRenderer(new ComboBoxTypeRenderer());
        this.comboBoxExploitTypes.addItemListener(e -> {
            if (!(e.getStateChange() == ItemEvent.SELECTED)) {
                return;
            }
            Arrays.asList(this.username.get(), this.password.get(), this.scrollListPaths, this.textfieldUrlShell)
            .forEach(component -> component.setVisible(false));
            ModelItemType selectedItem = (ModelItemType) e.getItem();
            if (!ManagerExploit.KEY_UDF_TAB.equals(selectedItem.getKeyLabel())) {
                this.scrollListPaths.setVisible(true);
                this.textfieldUrlShell.setVisible(true);
                if (ManagerExploit.KEY_SQLSHELL_TAB.equals(selectedItem.getKeyLabel())) {
                    this.username.get().setVisible(true);
                    this.password.get().setVisible(true);
                }
            }
            this.updateUI();  // required to adapt panel
        });
        this.comboBoxExploitMethods.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() instanceof ExploitMethod) {
                ExploitMethod selectedItem = (ExploitMethod) e.getItem();
                this.netshare.get().setVisible(false);
                if (selectedItem.equals(ExploitMethod.NETSHARE)) {
                    this.netshare.get().setVisible(true);
                }
                this.updateUI();  // required to adapt panel
            }
        });

        this.comboBoxExploitMethods.setRenderer(new ComboBoxMethodRenderer());
        this.comboBoxExploitMethods.addActionListener(new SeparatorListener(this.comboBoxExploitMethods));
        var labelUsing = new JLabel("using");
        groupLayout.setHorizontalGroup(
            groupLayout
            .createParallelGroup()
            .addGroup(
                groupLayout
                .createSequentialGroup()
                .addComponent(this.comboBoxExploitTypes)
                .addComponent(labelUsing, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(this.comboBoxExploitMethods, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
            )
            .addGroup(
                groupLayout.createParallelGroup()
                .addComponent(this.netshare.get())
                .addComponent(this.username.get())
                .addComponent(this.password.get())
            )
        );

        groupLayout.setVerticalGroup(
            groupLayout
            .createSequentialGroup()
            .addGroup(
                groupLayout
                .createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(this.comboBoxExploitTypes)
                .addComponent(labelUsing)
                .addComponent(this.comboBoxExploitMethods)
            )
            .addGroup(
                groupLayout
                .createParallelGroup()
                .addComponent(this.netshare.get())
            )
            .addGroup(
                groupLayout
                .createParallelGroup()
                .addComponent(this.username.get())
            )
            .addGroup(
                groupLayout
                .createParallelGroup()
                .addComponent(this.password.get())
            )
        );
        
        this.add(userPassPanel, BorderLayout.NORTH);
    }

    @Override
    protected void createPayload(String remotePathFolder, String urlShell, File fileToUpload) throws JSqlException {
        var exploitMethod = ExploitMethod.forName(Objects.requireNonNull(this.comboBoxExploitMethods.getSelectedItem()).toString())
        .orElse(ExploitMethod.AUTO);

        if (remotePathFolder != null && !remotePathFolder.endsWith("/")) {
            remotePathFolder += "/";
        }
        String pathNetshare = null;
        if (exploitMethod == ExploitMethod.NETSHARE) {
            if (!this.netshare.get().getText().endsWith("\\")) {
                pathNetshare = this.netshare.get().getText() + "\\";
            }
        }

        var modelItemType = (ModelItemType) this.comboBoxExploitTypes.getSelectedItem();
        if (ManagerExploit.KEY_UDF_TAB.equals(Objects.requireNonNull(modelItemType).getKeyLabel())) {
            MediatorHelper.model().getUdfAccess().createUdf(this.netshare.get().getText(), exploitMethod);
        } else if (ManagerExploit.KEY_WEBSHELL_TAB.equals(modelItemType.getKeyLabel())) {
            MediatorHelper.model().getResourceAccess().createExploitWeb(
                remotePathFolder,
                urlShell,
                pathNetshare,
                exploitMethod
            );
        } else if (ManagerExploit.KEY_SQLSHELL_TAB.equals(modelItemType.getKeyLabel())) {
            MediatorHelper.model().getResourceAccess().createExploitSql(
                remotePathFolder,
                urlShell,
                pathNetshare,
                exploitMethod,
                this.username.get().getText(),
                this.password.get().getText()
            );
        } else if (ManagerExploit.KEY_UPLOAD_TAB.equals(modelItemType.getKeyLabel())) {
            MediatorHelper.model().getResourceAccess().createExploitUpload(
                remotePathFolder,
                urlShell,
                pathNetshare,
                exploitMethod,
                fileToUpload
            );
        }
    }
}
