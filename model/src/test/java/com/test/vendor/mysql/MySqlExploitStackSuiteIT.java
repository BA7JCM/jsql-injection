package com.test.vendor.mysql;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.ExploitMode;
import com.jsql.model.exception.JSqlException;
import com.jsql.view.terminal.SystemOutTerminal;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junitpioneer.jupiter.RetryingTest;

import java.util.UUID;

public class MySqlExploitStackSuiteIT extends ConcreteMySqlSuiteIT {
    
    @Override
    public void setupInjection() throws Exception {
        InjectionModel model = new InjectionModel();
        this.injectionModel = model;

        model.subscribe(new SystemOutTerminal());

        model.getMediatorUtils().getParameterUtil().initQueryString(
            "http://jsql-lamp:8079/php/get-stack.php?id="
        );

        model.setIsScanning(true);

        model
        .getMediatorUtils()
        .getConnectionUtil()
        .withMethodInjection(model.getMediatorMethod().getQuery())
        .withTypeRequest("GET");

        model
        .getMediatorUtils()
        .getPreferencesUtil()
        .withIsStrategyBlindDisabled(true)
        .withIsStrategyTimeDisabled(true)
        .withIsStrategyStackDisabled(true)
        .withIsStrategyMultibitDisabled(true)
        .withIsStrategyErrorDisabled(true);
        
        model.beginInjection();
    }
    
    @RetryingTest(3)
    public void exploitUdfAuto() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitMysql().createUdf(null, ExploitMode.AUTO);
        String resultCommand = this.injectionModel.getResourceAccess().getExploitMysql().runUdfCmd(
            "uname",
            UUID.randomUUID()
        );
        LOGGER.info("udf: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitSqlAuto() throws JSqlException {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitMysql().createSql(
            "/var/www/html/", StringUtils.EMPTY, null, ExploitMode.AUTO, "root", "password"
        );
        String resultCommand = this.injectionModel.getResourceAccess().runSqlShell(
            "select version()",
            UUID.randomUUID(),
            urlSuccess,
            "root",
            "password"
        );
        LOGGER.info("sql: found {}, to find {}", resultCommand.trim(), "5.7.42-0ubuntu0.18.04.1");
        Assertions.assertTrue(resultCommand.trim().contains("5.7.42-0ubuntu0.18.04.1"));
    }

    @RetryingTest(3)
    public void exploitSqlQueryBody() throws JSqlException {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitMysql().createSql(
            "/var/www/html/", StringUtils.EMPTY, null, ExploitMode.QUERY_BODY, "root", "password"
        );
        String resultCommand = this.injectionModel.getResourceAccess().runSqlShell(
            "select version()",
            UUID.randomUUID(),
            urlSuccess,
            "root",
            "password"
        );
        LOGGER.info("sql: found {}, to find {}", resultCommand.trim(), "5.7.42-0ubuntu0.18.04.1");
        Assertions.assertTrue(resultCommand.trim().contains("5.7.42-0ubuntu0.18.04.1"));
    }

    @RetryingTest(3)
    public void exploitSqlTable() throws JSqlException {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitMysql().createSql(
            "/var/www/html/", StringUtils.EMPTY, null, ExploitMode.TEMP_TABLE, "root", "password"
        );
        String resultCommand = this.injectionModel.getResourceAccess().runSqlShell(
            "select version()",
            UUID.randomUUID(),
            urlSuccess,
            "root",
            "password"
        );
        LOGGER.info("sql: found {}, to find {}", resultCommand.trim(), "5.7.42-0ubuntu0.18.04.1");
        Assertions.assertTrue(resultCommand.trim().contains("5.7.42-0ubuntu0.18.04.1"));
    }
}
